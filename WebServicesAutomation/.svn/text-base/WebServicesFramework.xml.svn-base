<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="WebServicesFramework" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="SelectMemberClaimSummaryDataServiceV5ServiceSoapBinding" type="wsdl" bindingName="{http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5}SelectMemberClaimSummaryDataServiceV5ServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="https://aesystestproxy-vm.uhc.com:33443/upm3/claimshighway/SelectMemberClaimSummaryDataV5?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="https://aesystestproxy-vm.uhc.com:33443/upm3/claimshighway/SelectMemberClaimSummaryDataV5?wsdl"><con:part><con:url>https://aesystestproxy-vm.uhc.com:33443/upm3/claimshighway/SelectMemberClaimSummaryDataV5?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="SelectMemberClaimSummaryDataServiceV5Service" targetNamespace="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5" xmlns:ns1="http://upm3.uhc.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:import namespace="http://upm3.uhc.com"/>
      <xs:element name="internalUse" type="ns1:internalUse"/>
      <xs:element name="keyValuePair" type="ns1:keyValuePair"/>
      <xs:element name="logLevel" type="ns1:logLevel"/>
      <xs:element name="pingHop" type="ns1:pingHop"/>
      <xs:element name="pingRequest" type="ns1:pingRequest"/>
      <xs:element name="pingResponse" type="ns1:pingResponse"/>
      <xs:element name="requestBase" type="ns1:requestBase"/>
      <xs:element name="requestHeader" type="ns1:requestHeader"/>
      <xs:element name="responseBase" type="ns1:responseBase"/>
      <xs:element name="responseHeader" type="ns1:responseHeader"/>
      <xs:element name="serviceCallStatus" type="ns1:serviceCallStatus"/>
      <xs:element name="serviceHop" type="ns1:serviceHop"/>
      <xs:element name="statusMessage" type="ns1:statusMessage"/>
      <xs:element name="statusMessageLevel" type="ns1:statusMessageLevel"/>
      <xs:element name="vr1StatusContainer" type="ns1:vr1StatusContainer"/>
      <xs:element name="vrcStatusGroup" type="ns1:vrcStatusGroup"/>
      <xs:complexType name="selectMemberClaimSummaryDataRequest">
        <xs:complexContent>
          <xs:extension base="ns1:requestBase">
            <xs:sequence>
              <xs:element minOccurs="0" name="controlModifiers" type="tns:controlModifierType"/>
              <xs:element minOccurs="0" name="searchType" type="xs:string"/>
              <xs:element minOccurs="0" name="mpin" type="xs:string"/>
              <xs:element minOccurs="0" name="claimSourceID" type="xs:string"/>
              <xs:element minOccurs="0" name="tin" type="xs:string"/>
              <xs:element minOccurs="0" name="npiId" type="xs:string"/>
              <xs:element minOccurs="0" name="policyNumber" type="xs:string"/>
              <xs:element minOccurs="0" name="employeeId" type="xs:string"/>
              <xs:element minOccurs="0" name="caeClaimNumber" type="xs:string"/>
              <xs:element minOccurs="0" name="patientFirstName" type="xs:string"/>
              <xs:element minOccurs="0" name="patientDateOfBirth" type="xs:string"/>
              <xs:element minOccurs="0" name="claimFirstDate" type="xs:string"/>
              <xs:element minOccurs="0" name="claimLastDate" type="xs:string"/>
              <xs:element minOccurs="0" name="dateType" type="xs:string"/>
              <xs:element minOccurs="0" name="claimStatus" type="xs:string"/>
              <xs:element minOccurs="0" name="submittedChargeAmount" type="xs:string"/>
              <xs:element minOccurs="0" name="cosmosDivisionCode" type="xs:string"/>
              <xs:element minOccurs="0" name="phsCompanyNumber" type="xs:string"/>
              <xs:element minOccurs="0" name="reconTrackingNumber" type="xs:string"/>
              <xs:element minOccurs="0" name="suffixCode" type="xs:string"/>
              <xs:element minOccurs="0" name="pagingState" type="tns:pagingStateType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="controlModifierType">
        <xs:sequence>
          <xs:element minOccurs="0" name="claimsHighwaySystemParameter" type="tns:claimsHighwaySystemParameterType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="claimsHighwaySystemParameterType">
        <xs:sequence>
          <xs:element minOccurs="0" name="applicationID" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pagingStateType">
        <xs:sequence>
          <xs:element minOccurs="0" name="moreData" type="xs:string"/>
          <xs:element minOccurs="0" name="nextClaimFirstDate" type="xs:string"/>
          <xs:element minOccurs="0" name="nextClaimLastDate" type="xs:string"/>
          <xs:element minOccurs="0" name="nextICN" type="xs:string"/>
          <xs:element minOccurs="0" name="nextICNType" type="xs:string"/>
          <xs:element minOccurs="0" name="nextSingleDate" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="selectMemberClaimSummaryDataResponse">
        <xs:complexContent>
          <xs:extension base="ns1:responseBase">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="claimData" nillable="true" type="tns:claimDataType"/>
              <xs:element minOccurs="0" name="pagingState" type="tns:pagingStateType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="claimDataType">
        <xs:sequence>
          <xs:element minOccurs="0" name="adjustedDate" type="xs:string"/>
          <xs:element minOccurs="0" name="adjustedTime" type="xs:string"/>
          <xs:element minOccurs="0" name="billType" type="xs:string"/>
          <xs:element minOccurs="0" name="billingProviderName" type="xs:string"/>
          <xs:element minOccurs="0" name="caeClaimNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="capitationIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="checkNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="checkPaymentEFTIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="checkSeriesDesignator" type="xs:string"/>
          <xs:element minOccurs="0" name="claimCARCCode" type="xs:string"/>
          <xs:element minOccurs="0" name="claimCARCCount" type="xs:string"/>
          <xs:element minOccurs="0" name="claimFirstServiceDate" type="xs:string"/>
          <xs:element minOccurs="0" name="claimINNOon" type="xs:string"/>
          <xs:element minOccurs="0" name="claimLastServiceDate" type="xs:string"/>
          <xs:element minOccurs="0" name="claimMoreCARCSIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="claimRARCCode" type="xs:string"/>
          <xs:element minOccurs="0" name="claimRemarkCode" type="xs:string"/>
          <xs:element minOccurs="0" name="claimStatusCode" type="xs:string"/>
          <xs:element minOccurs="0" name="claimsHighwayICN" type="xs:string"/>
          <xs:element minOccurs="0" name="detailCall" type="xs:string"/>
          <xs:element minOccurs="0" name="draftNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="drgNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="employeeID" type="xs:string"/>
          <xs:element minOccurs="0" name="facilityOrProfessionalCode" type="xs:string"/>
          <xs:element minOccurs="0" name="fundingType" type="xs:string"/>
          <xs:element minOccurs="0" name="niceClaimStatusCode" type="xs:string"/>
          <xs:element minOccurs="0" name="niceClaimTypeCode" type="xs:string"/>
          <xs:element minOccurs="0" name="originalClaimNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="paperlessIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="partitionId" type="xs:string"/>
          <xs:element minOccurs="0" name="patientAccountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="patientFirstName" type="xs:string"/>
          <xs:element minOccurs="0" name="patientLastName" type="xs:string"/>
          <xs:element minOccurs="0" name="patientRelationship" type="xs:string"/>
          <xs:element minOccurs="0" name="payIssueDate" type="xs:string"/>
          <xs:element minOccurs="0" name="payStatusCode" type="xs:string"/>
          <xs:element minOccurs="0" name="paymentAmount" type="xs:string"/>
          <xs:element minOccurs="0" name="pendCode" type="xs:string"/>
          <xs:element minOccurs="0" name="policyNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="processDate" type="xs:string"/>
          <xs:element minOccurs="0" name="providerBillingNPIId" type="xs:string"/>
          <xs:element minOccurs="0" name="providerPreferredTINNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="providerPreferredTINPrefix" type="xs:string"/>
          <xs:element minOccurs="0" name="providerPreferredTINSuffix" type="xs:string"/>
          <xs:element minOccurs="0" name="providerRenderingNPIId" type="xs:string"/>
          <xs:element minOccurs="0" name="receivedDate" type="xs:string"/>
          <xs:element minOccurs="0" name="reconTrackingNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="renderingProviderName" type="xs:string"/>
          <xs:element minOccurs="0" name="resubmittedCAEClaimNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="statusEffectiveDate" type="xs:string"/>
          <xs:element minOccurs="0" name="topsClaimClosedIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="topsClaimPaidIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="topsClaimPendedIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="topsClaimRejectedIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="topsClaimUnprocessedIndicator" type="xs:string"/>
          <xs:element minOccurs="0" name="totalChargeAmount" type="xs:string"/>
          <xs:element minOccurs="0" name="totalCopayAmount" type="xs:string"/>
          <xs:element minOccurs="0" name="totalNotCoveredAmount" type="xs:string"/>
          <xs:element minOccurs="0" name="totalPaidAmount" type="xs:string"/>
          <xs:element minOccurs="0" name="totalPatientResponsibilityAmount" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="ServiceException" type="tns:ServiceException"/>
      <xs:complexType name="ServiceException">
        <xs:sequence/>
      </xs:complexType>
      <xs:element name="invokePing" type="tns:invokePing"/>
      <xs:complexType name="invokePing">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="ns1:pingRequest"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="invokePingResponse" type="tns:invokePingResponse"/>
      <xs:complexType name="invokePingResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="ns1:pingResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="invokeService" type="tns:invokeService"/>
      <xs:complexType name="invokeService">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="tns:selectMemberClaimSummaryDataRequest"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="invokeServiceResponse" type="tns:invokeServiceResponse"/>
      <xs:complexType name="invokeServiceResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:selectMemberClaimSummaryDataResponse"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://upm3.uhc.com" xmlns:ns1="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5" xmlns:tns="http://upm3.uhc.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:import namespace="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5"/>
      <xs:complexType name="pingRequest">
        <xs:complexContent>
          <xs:extension base="tns:requestBase">
            <xs:sequence/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType abstract="true" name="requestBase">
        <xs:sequence>
          <xs:element name="requestHeader" type="tns:requestHeader"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="requestHeader">
        <xs:sequence>
          <xs:element name="applicationName" type="xs:string"/>
          <xs:element name="applicationInstanceName" nillable="true" type="xs:string"/>
          <xs:element name="logLevel" type="tns:logLevel"/>
          <xs:element minOccurs="0" name="externalId" nillable="true" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="serviceOption" nillable="true" type="tns:keyValuePair"/>
          <xs:element minOccurs="0" name="internalUse" nillable="true" type="tns:internalUse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="keyValuePair">
        <xs:sequence>
          <xs:element name="key" type="xs:string"/>
          <xs:element name="value" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="internalUse">
        <xs:sequence>
          <xs:element name="uid" nillable="true" type="xs:string"/>
          <xs:element name="serviceName" nillable="true" type="xs:string"/>
          <xs:element name="serviceVersion" nillable="true" type="xs:string"/>
          <xs:element name="originalConsumer" nillable="true" type="xs:string"/>
          <xs:element name="originalServiceName" nillable="true" type="xs:string"/>
          <xs:element name="originalServiceVersion" nillable="true" type="xs:string"/>
          <xs:element name="logSequence" nillable="true" type="xs:int"/>
          <xs:element name="uidGeneratedBy" nillable="true" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pingResponse">
        <xs:complexContent>
          <xs:extension base="tns:responseBase">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="pingHops" type="tns:pingHop"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType abstract="true" name="responseBase">
        <xs:sequence>
          <xs:element name="responseHeader" type="tns:responseHeader"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pingHop">
        <xs:sequence>
          <xs:element minOccurs="0" name="className" type="xs:string"/>
          <xs:element minOccurs="0" name="bundleName" type="xs:string"/>
          <xs:element minOccurs="0" name="bundleVersion" type="xs:string"/>
          <xs:element minOccurs="0" name="bundleId" type="xs:string"/>
          <xs:element minOccurs="0" name="timestamp" type="xs:string"/>
          <xs:element minOccurs="0" name="applicationAuthorized" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="configurationInformation" nillable="true" type="tns:keyValuePair"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="responseHeader">
        <xs:sequence>
          <xs:element name="serviceCallStatus" type="tns:serviceCallStatus"/>
          <xs:element name="externalId" nillable="true" type="xs:string"/>
          <xs:element name="serviceName" type="xs:string"/>
          <xs:element name="serviceVersion" type="xs:string"/>
          <xs:element name="logLevel" type="tns:logLevel"/>
          <xs:element name="upmEnvironment" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="serviceHops" nillable="true" type="tns:serviceHop"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="statusMessages" nillable="true" type="tns:statusMessage"/>
          <xs:element name="internalUse" type="tns:internalUse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="serviceHop">
        <xs:sequence>
          <xs:element minOccurs="0" name="bundleName" type="xs:string"/>
          <xs:element minOccurs="0" name="bundleVersion" type="xs:string"/>
          <xs:element minOccurs="0" name="bundleId" type="xs:string"/>
          <xs:element minOccurs="0" name="startTimestamp" type="xs:string"/>
          <xs:element minOccurs="0" name="endTimestamp" type="xs:string"/>
          <xs:element minOccurs="0" name="totalTimeInMilliseconds" type="xs:string"/>
          <xs:element minOccurs="0" name="location" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="statusMessage">
        <xs:sequence>
          <xs:element name="statusMessageLevel" type="tns:statusMessageLevel"/>
          <xs:element name="messageType" type="xs:string"/>
          <xs:element name="statusMessage" type="xs:string"/>
          <xs:element minOccurs="0" name="hopLocation" nillable="true" type="xs:string"/>
          <xs:element minOccurs="0" name="stackTrace" nillable="true" type="xs:string"/>
          <xs:element name="statusOrigin" type="xs:string"/>
          <xs:element minOccurs="0" name="vrcStatusGroup" nillable="true" type="tns:vrcStatusGroup"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="vrcStatusGroup">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="statusContainerBeans" nillable="true" type="tns:vr1StatusContainer"/>
          <xs:element minOccurs="0" name="vr1_status_container_num_occ" type="xs:string"/>
          <xs:element minOccurs="0" name="vrc_status_generated_by" type="xs:string"/>
          <xs:element minOccurs="0" name="vrc_status_orig_channel" type="xs:string"/>
          <xs:element minOccurs="0" name="vrc_status_owned_by" type="xs:string"/>
          <xs:element minOccurs="0" name="vrc_status_service_name" type="xs:string"/>
          <xs:element minOccurs="0" name="vrc_status_service_version" type="xs:string"/>
          <xs:element minOccurs="0" name="vrc_status_system" type="xs:string"/>
          <xs:element minOccurs="0" name="vrc_status_transid" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="vr1StatusContainer">
        <xs:sequence>
          <xs:element minOccurs="0" name="vr1_status_additional_info" type="xs:string"/>
          <xs:element minOccurs="0" name="vr1_status_code" type="xs:string"/>
          <xs:element minOccurs="0" name="vr1_status_code_desc" type="xs:string"/>
          <xs:element minOccurs="0" name="vr1_status_code_type_desc" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="logLevel">
        <xs:restriction base="xs:string">
          <xs:enumeration value="DEFAULT"/>
          <xs:enumeration value="TRACE"/>
          <xs:enumeration value="DEBUG"/>
          <xs:enumeration value="INFO"/>
          <xs:enumeration value="WARN"/>
          <xs:enumeration value="ERROR"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="serviceCallStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="SUCCESS"/>
          <xs:enumeration value="INFO"/>
          <xs:enumeration value="ERROR"/>
          <xs:enumeration value="EXCEPTION"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="statusMessageLevel">
        <xs:restriction base="xs:string">
          <xs:enumeration value="INFORMATIONAL"/>
          <xs:enumeration value="FAULT"/>
          <xs:enumeration value="EXCEPTION"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="invokeServiceResponse">
    <wsdl:part element="tns:invokeServiceResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="invokePingResponse">
    <wsdl:part element="tns:invokePingResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="invokePing">
    <wsdl:part element="tns:invokePing" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ServiceException">
    <wsdl:part element="tns:ServiceException" name="ServiceException"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="invokeService">
    <wsdl:part element="tns:invokeService" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="SelectMemberClaimSummaryData">
    <wsdl:operation name="invokePing">
      <wsdl:input message="tns:invokePing" name="invokePing"></wsdl:input>
      <wsdl:output message="tns:invokePingResponse" name="invokePingResponse"></wsdl:output>
      <wsdl:fault message="tns:ServiceException" name="ServiceException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="invokeService">
      <wsdl:input message="tns:invokeService" name="invokeService"></wsdl:input>
      <wsdl:output message="tns:invokeServiceResponse" name="invokeServiceResponse"></wsdl:output>
      <wsdl:fault message="tns:ServiceException" name="ServiceException"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SelectMemberClaimSummaryDataServiceV5ServiceSoapBinding" type="tns:SelectMemberClaimSummaryData">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="invokePing">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="invokePing">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="invokePingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ServiceException">
        <soap:fault name="ServiceException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="invokeService">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="invokeService">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="invokeServiceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ServiceException">
        <soap:fault name="ServiceException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SelectMemberClaimSummaryDataServiceV5Service">
    <wsdl:port binding="tns:SelectMemberClaimSummaryDataServiceV5ServiceSoapBinding" name="SelectMemberClaimSummaryDataPort">
      <soap:address location="http://u3cbravo.uhc.com/upm3_gateway/upm3/claimshighway/SelectMemberClaimSummaryDataV5"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://u3cbravo.uhc.com/upm3_gateway/upm3/claimshighway/SelectMemberClaimSummaryDataV5</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="invokePing" bindingOperationName="invokePing" type="Request-Response" outputName="invokePingResponse" inputName="invokePing" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://u3cbravo.uhc.com/upm3_gateway/upm3/claimshighway/SelectMemberClaimSummaryDataV5</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v5="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5">
   <soapenv:Header/>
   <soapenv:Body>
      <v5:invokePing>
         <!--Optional:-->
         <arg0>
            <requestHeader>
               <applicationName>?</applicationName>
               <applicationInstanceName>?</applicationInstanceName>
               <logLevel>?</logLevel>
               <!--Optional:-->
               <externalId>?</externalId>
               <!--Zero or more repetitions:-->
               <serviceOption>
                  <key>?</key>
                  <value>?</value>
               </serviceOption>
               <!--Optional:-->
               <internalUse>
                  <uid>?</uid>
                  <serviceName>?</serviceName>
                  <serviceVersion>?</serviceVersion>
                  <originalConsumer>?</originalConsumer>
                  <originalServiceName>?</originalServiceName>
                  <originalServiceVersion>?</originalServiceVersion>
                  <logSequence>?</logSequence>
                  <uidGeneratedBy>?</uidGeneratedBy>
               </internalUse>
            </requestHeader>
         </arg0>
      </v5:invokePing>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5/SelectMemberClaimSummaryData/invokePing"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="invokeService" bindingOperationName="invokeService" type="Request-Response" outputName="invokeServiceResponse" inputName="invokeService" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="CHWY_UNET" outgoingWss="test"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://uhgservicegateway-tst.uhc.com/uhgservices/alpha/upm3/claimshighway/SelectMemberClaimSummaryDataV5</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v5="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5">
   <soapenv:Header/>
   <soapenv:Body>
      <v5:invokeService>
         <!--Optional:-->
         <arg0>
            <requestHeader>
               <applicationName>PTRCR</applicationName>
               <applicationInstanceName>PTRCR</applicationInstanceName>
               <logLevel>DEBUG</logLevel>
               <!--Optional:-->
               <externalId></externalId>
               <!--Zero or more repetitions:-->
               <serviceOption>
                  <key></key>
                  <value></value>
               </serviceOption>
               <!--Optional:-->
               <internalUse>
                  <uid></uid>
                  <serviceName></serviceName>
                  <serviceVersion></serviceVersion>
                  <originalConsumer></originalConsumer>
                  <originalServiceName></originalServiceName>
                  <originalServiceVersion></originalServiceVersion>
                  <logSequence></logSequence>
                  <uidGeneratedBy></uidGeneratedBy>
               </internalUse>
            </requestHeader>
            <!--Optional:-->
            <controlModifiers>
               <!--Optional:-->
               <claimsHighwaySystemParameter>
                  <!--Optional:-->
                  <applicationID>PTRCR</applicationID>
               </claimsHighwaySystemParameter>
            </controlModifiers>
            <!--Optional:-->
            <searchType>CLAIM NUMBER</searchType>
            <!--Optional:-->
            <mpin>002057390</mpin>
            <!--Optional:-->
            <claimSourceID>01</claimSourceID>
            <!--Optional:-->
            <tin>030476360</tin>
            <!--Optional:-->
            <npiId></npiId>
            <!--Optional:-->
            <policyNumber></policyNumber>
            <!--Optional:-->
            <employeeId></employeeId>
            <!--Optional:-->
            <caeClaimNumber>1003730680</caeClaimNumber>
            <!--Optional:-->
            <patientFirstName></patientFirstName>
            <!--Optional:-->
            <patientDateOfBirth></patientDateOfBirth>
            <!--Optional:-->
            <claimFirstDate></claimFirstDate>
            <!--Optional:-->
            <claimLastDate></claimLastDate>
            <!--Optional:-->
            <dateType></dateType>
            <!--Optional:-->
            <claimStatus></claimStatus>
            <!--Optional:-->
            <submittedChargeAmount></submittedChargeAmount>
            <!--Optional:-->
            <cosmosDivisionCode></cosmosDivisionCode>
            <!--Optional:-->
            <phsCompanyNumber></phsCompanyNumber>
            <!--Optional:-->
            <reconTrackingNumber></reconTrackingNumber>
            <!--Optional:-->
            <suffixCode></suffixCode>
            <!--Optional:-->
            <pagingState>
               <!--Optional:-->
               <moreData>false</moreData>
               <!--Optional:-->
               <nextClaimFirstDate></nextClaimFirstDate>
               <!--Optional:-->
               <nextClaimLastDate></nextClaimLastDate>
               <!--Optional:-->
               <nextICN></nextICN>
               <!--Optional:-->
               <nextICNType></nextICNType>
               <!--Optional:-->
               <nextSingleDate></nextSingleDate>
            </pagingState>
         </arg0>
      </v5:invokeService>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5/SelectMemberClaimSummaryData/invokeService"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="OptumRallyAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://api-stg.optum.com:8443</con:endpoint></con:endpoints><con:resource name="BiometricsResource" path="/stage/phr/biometrics/v1.0"><con:settings/><con:parameters/><con:method name="POSTMethod" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="https://api-stg.optum.com/stage/phr/biometrics/v1.0">v1:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Biometrics" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "RALLY",
   "ownerIdSet": {"personId": "20644244"},
   "type": "0",
   "startDate": "2014-12-10T00:00:00Z",
   "endDate": "2015-04-13T23:59:59Z",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ConditionsResource" path="/stage/phr/conditions/v1.0"><con:settings/><con:parameters/><con:method name="POSTMethod" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="https://api-stg.optum.com/stage/phr/biometrics/v1.0">v1:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Conditions" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "RALLY",
   "ownerIdSet": {"personId": "20644244"},
   "type": "0",
   "startDate": "2014-12-10T00:00:00Z",
   "endDate": "2015-04-13T23:59:59Z",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="MedicationsResource" path="/stage/phr/medications/v1.0"><con:settings/><con:parameters/><con:method name="POSTMethod" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="https://api-stg.optum.com/stage/phr/biometrics/v1.0">v1:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Medications" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "RALLY",
   "ownerIdSet": {"personId": "20644244"},
   "type": "0",
   "startDate": "2014-12-10T00:00:00Z",
   "endDate": "2015-04-13T23:59:59Z",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="SurgeryProceduresResource" path="/stage/phr/surgeryprocedures/v1.0"><con:settings/><con:parameters/><con:method name="POSTMethod" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="https://api-stg.optum.com/stage/phr/biometrics/v1.0">v1:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="SurgeryProcedures" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "RALLY",
   "ownerIdSet": {"personId": "20644244"},
   "type": "0",
   "startDate": "2014-12-10T00:00:00Z",
   "endDate": "2015-04-13T23:59:59Z",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ProvidersResource" path="/stage/phr/providers/v1.0"><con:settings/><con:parameters/><con:method name="POSTMethod" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="https://api-stg.optum.com/stage/phr/biometrics/v1.0">v1:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Providers" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "RALLY",
   "ownerIdSet": {"personId": "20644244"},
   "type": "0",
   "startDate": "2014-12-10T00:00:00Z",
   "endDate": "2015-04-13T23:59:59Z",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PregnanciesResource" path="/stage/phr/pregnancies/v1.0"><con:settings/><con:parameters/><con:method name="POSTMethod" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="https://api-stg.optum.com/stage/phr/biometrics/v1.0">v1:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Pregnancies" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "RALLY",
   "ownerIdSet": {"personId": "20644244"},
   "type": "0",
   "startDate": "2014-12-10T00:00:00Z",
   "endDate": "2015-04-13T23:59:59Z",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="AllergiesResource" path="/stage/phr/allergies/v1.0"><con:settings/><con:parameters/><con:method name="POSTMethod" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="https://api-stg.optum.com/stage/phr/biometrics/v1.0">v1:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Allergies" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "RALLY",
   "ownerIdSet": {"personId": "20644244"},
   "type": "0",
   "startDate": "2014-12-10T00:00:00Z",
   "endDate": "2015-04-13T23:59:59Z",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="TestSuite1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SOAPServicesFinalVersion"><con:settings/><con:config><script><![CDATA[import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import java.io.*;
import java.util.HashMap;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

//imports for xml parsing
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;

Object.metaClass.globalColIndexCounter = 1
Object.metaClass.globalXMLTagRepetitionIndex = 0
Object.metaClass.bColIncrement = true
def HSSFWorkbook workbook
def HSSFSheet worksheet
def HSSFRow row1
def HSSFRow row2

class ReadXMLFile {
	def log
	def HSSFWorkbook workbook
	def HSSFSheet worksheet
	def HSSFRow row1
	def HSSFRow row2
	def duplicateFlag;
	HashMap <String, Integer> mapper = new HashMap<String, Integer>(); //hash map for storing xml tag repetition indexes
	//ArrayList arrXMLTags = new ArrayList(); //to track if a tag exists already in the output file
		
	def ReadXML(xmlPath) 
	{
		try {
			File fXmlFile = new File(xmlPath);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			//Code for Converting the xml response to UTF-8 compatible format
			InputStream inputStream= new FileInputStream(fXmlFile);
			Reader reader = new InputStreamReader(inputStream,"UTF-8");
			InputSource is = new InputSource(reader);
			is.setEncoding("UTF-8");
			Document doc = dBuilder.parse(is);
			//doc.getDocumentElement().normalize();
			log.info("Root element :" + doc.getDocumentElement().getNodeName())
			if (doc.hasChildNodes()) {
 				printNode(doc.getChildNodes());
 			}
		} catch (Exception e) {
			log.info(e.getMessage())
    		}
	}
	
	def printNode(NodeList nodeList) {
		//log.info(nodeList.getLength())
		for (int count = 0; count < nodeList.getLength(); count++) {
			Node tempNode = nodeList.item(count);
			if (tempNode.getNodeType() == Node.ELEMENT_NODE) {
				if((tempNode.getTextContent() != "") && (tempNode.getTextContent().contains("\n") != true)) {
					if (tempNode.hasAttributes() == false) {
						if ((tempNode.getNodeName().contains("soap:Body") == false) && (tempNode.getNodeName().contains("responseHeader") == false) && (tempNode.getNodeName().contains("internalUse") == false)) {

							log.info("Node Length: - " + (tempNode.getNodeName()).length());
							if((tempNode.getNodeName()).length() <= 500) {
								if(globalColIndexCounter>255){
									bColIncrement = false;
								}
								if(bColIncrement == true){
									log.info("\nNode Name =" + tempNode.getNodeName())

									//Code to create a hash map object and store the repetition key values
									duplicateFlag = false;
									if (mapper.containsKey(tempNode.getNodeName())) {
										log.info("Duplicate or existing node - " + tempNode.getNodeName())
										log.info("Mapper Index: - " + mapper.get(tempNode.getNodeName()));
										mapper.put(tempNode.getNodeName(), mapper.get(tempNode.getNodeName())+1);
										duplicateFlag = true;
									} else { 
									    	mapper.put(tempNode.getNodeName(),0);
									}
		
									log.info("mapper key content - " + mapper.get(tempNode.getNodeName()));
		
									log.info("Column Index: - " + globalColIndexCounter)
									HSSFCell cellA1 = row1.createCell((short) globalColIndexCounter);
									if(duplicateFlag==true) {
										cellA1.setCellValue(tempNode.getNodeName() + "_" + mapper.get(tempNode.getNodeName()));
									} else {
										cellA1.setCellValue(tempNode.getNodeName());
									}
									
									CellStyle style = workbook.createCellStyle();
									style.setFillForegroundColor(HSSFColor.YELLOW.index);
		        						style.setFillPattern(CellStyle.SOLID_FOREGROUND);
									style.setBorderLeft((short) 1);            
									style.setBorderRight((short) 1);          
									style.setBorderTop((short) 1);              
									style.setBorderBottom((short) 1);
									//worksheet.autoSizeColumn(globalColIndexCounter);
									worksheet.setColumnWidth(globalColIndexCounter, 7500);
									cellA1.setCellStyle(style);
									
									log.info("Node Value =" + tempNode.getTextContent())
									log.info("Node contains new line character - " + tempNode.getTextContent().contains("\n"));
			
									//Iterator celliterator1 = row2.cellIterator();
									//while (celliterator1.hasNext()) {
									//	HSSFCell cells1 = celliterator.next();
									//	if(cells1.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
									//		current1 = HSSFCell.getColumnIndex();
									//		HSSFCell cellA2 = row2.createCell((short) current1);
									//		cellA2.setCellValue(tempNode.getNodeName());
									//	}
									//}		
			
									HSSFCell cellA2 = row2.createCell((short) globalColIndexCounter);
									cellA2.setCellValue(tempNode.getTextContent());
		
									CellStyle style1 = workbook.createCellStyle();
									if(tempNode.getTextContent().toUpperCase() == "SUCCESS") {
										style1.setFillForegroundColor(HSSFColor.GREEN.index);
		        							style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
									} else if(tempNode.getTextContent().toUpperCase() == "ERROR") {
										style1.setFillForegroundColor(HSSFColor.RED.index);
		        							style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
									}
									style1.setBorderLeft((short) 1);            
									style1.setBorderRight((short) 1);          
									style1.setBorderTop((short) 1);              
									style1.setBorderBottom((short) 1);
									cellA2.setCellStyle(style1);
			
									globalColIndexCounter++;	
								}
								
							}	
						}
					}
				}
				if (tempNode.hasChildNodes()) {
					// loop again if has child nodes
					printNode(tempNode.getChildNodes());
				}	
			}
		}
	}
}

class ExcelReader {
	def readData(context) 
 	{
		//def path = "C:\\Backup\\PTP_Project\\SOAP_Services\\Input.xls";
		def path = context.expand( '${#TestCase#InputFilePath}' )
		InputStream inputStream = new FileInputStream(path);
		Workbook workbook = WorkbookFactory.create(inputStream);
		Sheet sheet = workbook.getSheetAt(0);
              
		Iterator rowIterator = sheet.rowIterator();
		rowIterator.next()
		Row row;                       
		def rowsData = []
		while(rowIterator.hasNext())
		{
			row = rowIterator.next()
			def rowIndex = row.getRowNum()
			def colIndex;
			def rowData = []
			for (Cell cell : row) 
			{
				colIndex = cell.getColumnIndex()
				
				def value;

				switch (cell.cellType)
				{
					case HSSFCell.CELL_TYPE_NUMERIC:
						if(HSSFDateUtil.isCellDateFormatted(cell))
						{
							value = cell.dateCellValue;
						}
						else
						{
							value = new DataFormatter().formatCellValue(cell);
						}
		                    break;
					case HSSFCell.CELL_TYPE_BOOLEAN:
						value = cell.booleanCellValue
						break;
 					default:
						value = new DataFormatter().formatCellValue(cell);
						break;
				}
				 rowData[colIndex] = value
			}                    
			rowsData << rowData
         }
		rowsData
	}
}


//** LOG FILE DEFINITION - Place somewhere at the top of the script **//
def logDirectoryName = context.expand( '${#TestCase#logDirectoryName}' )
def testCaseLogFileName = context.expand( '${#TestCase#testCaseLogFileName}' )
def filext = ".log";
def fn = "$logDirectoryName$testCaseLogFileName$filext"
def FileName = new PrintWriter( new FileWriter(fn));

// Add for optional timestamp logging
def sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS"); 
def myTime = "";

// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
//def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "error log" );  // to be commented when running through test runner

//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath 
def logFile = new File(projectPath + "\\ErrorLog.txt")

//def mex = com.eviware.soapui.model.iface.MessageExchange
def myTestCase = context.testCase

//def pathout = "C:\\Backup\\PTP_Project\\SOAP_Services\\TestOutput.xls";
def pathout = context.expand( '${#TestCase#OutputFileDirectory}' )

String datetime=new Date().toGMTString();
datetime=datetime.replace(" ", "");
datetime=datetime.replace(":", "");
String outputpath = pathout + "SoapOutput_" + datetime + ".xls"

FileOutputStream OutStream = new FileOutputStream(outputpath);
workbook = new HSSFWorkbook();

//code to read the input excel file for each of the request
ExcelReader excelReader = new ExcelReader();
List rows = excelReader.readData(context);

//Define the object for the collection of requests in the soapUI test case
def soapuiRequests = testRunner.testCase.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class )
//Groovy Script to loop through each requests in the test case.
soapuiRequests.each
{
	//Code to read the service name and validate it if the service step is matching with the current request step.
	def d = []
	int num = 1;
	int set = 0;
	int headerIndex = 0, contentIndex = 1;
	int dataIterationIndex = 1;
	Iterator i = rows.iterator();
	
	while(i.hasNext())
	{
		d = i.next();
		String ServiceName = d[0]; //Service Name
		String ExecutionFlag = d[1]; //ExecutionFlag
	
		log.info(ServiceName)
		log.info(ExecutionFlag)
	
		if((ServiceName != null) && (ExecutionFlag != null)) 
		{
			if(ServiceName.toUpperCase() == it.name.toUpperCase())
			{
				if(ExecutionFlag.toUpperCase() == "YES")
				{
					//code to retrieve the parameters from input excel file
					myTestCase.setPropertyValue("Property1", d[2])
					myTestCase.setPropertyValue("Property2", d[3])
					myTestCase.setPropertyValue("Property3", d[4])
					myTestCase.setPropertyValue("Property4", d[5])
					myTestCase.setPropertyValue("Property5", d[6])
					myTestCase.setPropertyValue("Property6", d[7])
					myTestCase.setPropertyValue("Property7", d[8])
					myTestCase.setPropertyValue("Property8", d[9])
					myTestCase.setPropertyValue("Property9", d[10])
					myTestCase.setPropertyValue("Property10", d[11])

					log.info("Property1 - " + context.expand( '${#TestCase#Property1}' ));
					log.info("Property2 - " + context.expand( '${#TestCase#Property2}' ));
					log.info("Property3 - " + context.expand( '${#TestCase#Property3}' ));
					log.info("Property4 - " + context.expand( '${#TestCase#Property4}' ));
					log.info("Property5 - " + context.expand( '${#TestCase#Property5}' ));
					log.info("Property6 - " + context.expand( '${#TestCase#Property6}' ));
					log.info("Property7 - " + context.expand( '${#TestCase#Property7}' ));
					log.info("Property8 - " + context.expand( '${#TestCase#Property8}' ));
					log.info("Property9 - " + context.expand( '${#TestCase#Property9}' ));
					log.info("Property10 - " + context.expand( '${#TestCase#Property10}' ));
	
					//code to create response output in the output workbook with request step name as sheet name
					if(set == 0) {
						worksheet = workbook.createSheet(it.name);
						set++;
					}
					row1 = worksheet.createRow((short)headerIndex);
					row2 = worksheet.createRow((short)contentIndex);

					//Code to mention the header index to know which data iteration it belongs
					HSSFCell cellA1 = row1.createCell((short) 0);
					cellA1.setCellValue(it.name + "_" + dataIterationIndex);
					CellStyle style = workbook.createCellStyle();
					style.setFillForegroundColor(HSSFColor.YELLOW.index);
					style.setFillPattern(CellStyle.SOLID_FOREGROUND);
					style.setBorderLeft((short) 1);            
					style.setBorderRight((short) 1);          
					style.setBorderTop((short) 1);              
					style.setBorderBottom((short) 1);
					//worksheet.autoSizeColumn(globalColIndexCounter);
					worksheet.setColumnWidth(0, 7500);
					cellA1.setCellStyle(style);
	
					myTime = sdf.format( new Date());
					FileName.println( "$myTime Start " + it.name ); //timestamp
					testRunner.runTestStepByName( it.name)
				
					//xml file for response to be stored in local project path
					testCaseResponseFileName = projectPath + "\\" +  it.name + "_Response.xml"
					def resFileName = new File(testCaseResponseFileName)
								
					//def holder = groovyUtils.getXmlHolder (it.name + “#Response”).toString()
					def request =testRunner.testCase.getTestStepByName( it.name ); // Get the WS
					def req = request.getProperty( "Request" ); // Get the request of the WS
					def resp = request.getProperty( "Response" ); // Get the response of the WS
					FileName.println( it.name + " - Request:" ); // Print WS Name & Request: 
					FileName.println( req.value ); // Print WS request
					FileName.println( it.name + " - Response:" ); // Print WS Name & Response:
					FileName.println( resp.value ); // Print WS respone
					resFileName.write( resp.value ); //Print response into xml file in the project path
					
					//log.info(mex.getResponseContentAsXml.toString())
					//testRunner.runTestStepByName( "PropertyTransfer")
					myTime = sdf.format( new Date());
					FileName.println( "$myTime End " + it.name ); //timestamp
				
					ReadXMLFile readXMLObj = new ReadXMLFile(log:log, workbook:workbook, worksheet:worksheet, row1:row1, row2:row2);
					readXMLObj.ReadXML(testCaseResponseFileName);
					resFileName.delete()

					headerIndex = headerIndex + 2;
					contentIndex = contentIndex + 2;
					dataIterationIndex = dataIterationIndex + 1;
				}
			}
		}
	}
}

workbook.write(OutStream);
OutStream.flush();
OutStream.close();

//This is the first line in the soapUI log file. ------ this code snippet should be commented when running through test runner as the getlog area is deactivated while running from test runner
//   if (logArea != null) // code to verify if the error get log area is not null before saving anything
//   {
//   	logFile.write("soapUI Logs In a file.\r\n")
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ))       
//      
//   }

FileName.flush();
FileName.close();]]></script></con:config></con:testStep><con:testStep type="groovy" name="RESTServicesFinalVersion"><con:settings/><con:config><script><![CDATA[import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import java.io.*;
import java.util.HashMap;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

//imports for xml parsing
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;

Object.metaClass.globalColIndexCounter = 1
Object.metaClass.globalXMLTagRepetitionIndex = 0
Object.metaClass.bColIncrement = true
def HSSFWorkbook workbook
def HSSFSheet worksheet
def HSSFRow row1
def HSSFRow row2

class ReadXMLFile {
	def log
	def HSSFWorkbook workbook
	def HSSFSheet worksheet
	def HSSFRow row1
	def HSSFRow row2
	def duplicateFlag;
	HashMap <String, Integer> mapper = new HashMap<String, Integer>(); //hash map for storing xml tag repetition indexes
	//ArrayList arrXMLTags = new ArrayList(); //to track if a tag exists already in the output file
		
	def ReadXML(xmlPath) 
	{
		try {
			File fXmlFile = new File(xmlPath);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			//Code for Converting the xml response to UTF-8 compatible format
			InputStream inputStream= new FileInputStream(fXmlFile);
			Reader reader = new InputStreamReader(inputStream,"UTF-8");
			InputSource is = new InputSource(reader);
			is.setEncoding("UTF-8");
			Document doc = dBuilder.parse(is);
			//doc.getDocumentElement().normalize();
			log.info("Root element :" + doc.getDocumentElement().getNodeName())
			if (doc.hasChildNodes()) {
 				printNode(doc.getChildNodes());
 			}
		} catch (Exception e) {
			log.info(e.getMessage())
    		}
	}
	
	def printNode(NodeList nodeList) {
		//log.info(nodeList.getLength())
		for (int count = 0; count < nodeList.getLength(); count++) {
			Node tempNode = nodeList.item(count);
			if (tempNode.getNodeType() == Node.ELEMENT_NODE) {
				if((tempNode.getTextContent() != "") && (tempNode.getTextContent().contains("\n") != true)) {
					if (tempNode.hasAttributes() == false) {
						if ((tempNode.getNodeName().contains("soap:Body") == false) && (tempNode.getNodeName().contains("responseHeader") == false) && (tempNode.getNodeName().contains("internalUse") == false)) {

							log.info("Node Length: - " + (tempNode.getNodeName()).length());
							if((tempNode.getNodeName()).length() <= 500) {
								if(globalColIndexCounter>255){
									bColIncrement = false;
								}
								if(bColIncrement == true){
									log.info("\nNode Name =" + tempNode.getNodeName())

									//Code to create a hash map object and store the repetition key values
									duplicateFlag = false;
									if (mapper.containsKey(tempNode.getNodeName())) {
										log.info("Duplicate or existing node - " + tempNode.getNodeName())
										log.info("Mapper Index: - " + mapper.get(tempNode.getNodeName()));
										mapper.put(tempNode.getNodeName(), mapper.get(tempNode.getNodeName())+1);
										duplicateFlag = true;
									} else { 
									    	mapper.put(tempNode.getNodeName(),0);
									}
		
									log.info("mapper key content - " + mapper.get(tempNode.getNodeName()));
		
									log.info("Column Index: - " + globalColIndexCounter)
									HSSFCell cellA1 = row1.createCell((short) globalColIndexCounter);
									if(duplicateFlag==true) {
										cellA1.setCellValue(tempNode.getNodeName() + "_" + mapper.get(tempNode.getNodeName()));
									} else {
										cellA1.setCellValue(tempNode.getNodeName());
									}
									
									CellStyle style = workbook.createCellStyle();
									style.setFillForegroundColor(HSSFColor.YELLOW.index);
		        						style.setFillPattern(CellStyle.SOLID_FOREGROUND);
									style.setBorderLeft((short) 1);            
									style.setBorderRight((short) 1);          
									style.setBorderTop((short) 1);              
									style.setBorderBottom((short) 1);
									//worksheet.autoSizeColumn(globalColIndexCounter);
									worksheet.setColumnWidth(globalColIndexCounter, 7500);
									cellA1.setCellStyle(style);
									
									log.info("Node Value =" + tempNode.getTextContent())
									log.info("Node contains new line character - " + tempNode.getTextContent().contains("\n"));
									
									//Iterator celliterator1 = row2.cellIterator();
									//while (celliterator1.hasNext()) {
									//	HSSFCell cells1 = celliterator.next();
									//	if(cells1.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
									//		current1 = HSSFCell.getColumnIndex();
									//		HSSFCell cellA2 = row2.createCell((short) current1);
									//		cellA2.setCellValue(tempNode.getNodeName());
									//	}
									//}		
			
									HSSFCell cellA2 = row2.createCell((short) globalColIndexCounter);
									cellA2.setCellValue(tempNode.getTextContent());
		
									CellStyle style1 = workbook.createCellStyle();
									if(tempNode.getTextContent().toUpperCase() == "SUCCESS") {
										style1.setFillForegroundColor(HSSFColor.GREEN.index);
		        							style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
									} else if(tempNode.getTextContent().toUpperCase() == "ERROR" || tempNode.getTextContent().toUpperCase() == "FAILURE") {
										style1.setFillForegroundColor(HSSFColor.RED.index);
		        							style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
									}
									style1.setBorderLeft((short) 1);            
									style1.setBorderRight((short) 1);          
									style1.setBorderTop((short) 1);              
									style1.setBorderBottom((short) 1);
									cellA2.setCellStyle(style1);
			
									globalColIndexCounter++;	
								}
								
							}	
						}
					}
				}
				if (tempNode.hasChildNodes()) {
					// loop again if has child nodes
					printNode(tempNode.getChildNodes());
				}	
			}
		}
	}
}

class ExcelReader {
	def readData(context) 
 	{
		//def path = "C:\\Backup\\PTP_Project\\SOAP_Services\\Input.xls";
		def path = context.expand( '${#TestCase#RestInputFilePath}' )
		InputStream inputStream = new FileInputStream(path);
		Workbook workbook = WorkbookFactory.create(inputStream);
		Sheet sheet = workbook.getSheetAt(0);
              
		Iterator rowIterator = sheet.rowIterator();
		rowIterator.next()
		Row row;                       
		def rowsData = []
		while(rowIterator.hasNext())
		{
			row = rowIterator.next()
			def rowIndex = row.getRowNum()
			def colIndex;
			def rowData = []
			for (Cell cell : row) 
			{
				colIndex = cell.getColumnIndex()
				
				def value;

				switch (cell.cellType)
				{
					case HSSFCell.CELL_TYPE_NUMERIC:
						if(HSSFDateUtil.isCellDateFormatted(cell))
						{
							value = cell.dateCellValue;
						}
						else
						{
							value = new DataFormatter().formatCellValue(cell);
						}
		                    break;
					case HSSFCell.CELL_TYPE_BOOLEAN:
						value = cell.booleanCellValue
						break;
 					default:
						value = new DataFormatter().formatCellValue(cell);
						break;
				}
				 rowData[colIndex] = value
			}                    
			rowsData << rowData
         }
		rowsData
	}
}


//** LOG FILE DEFINITION - Place somewhere at the top of the script **//
def logDirectoryName = context.expand( '${#TestCase#logDirectoryName}' )
def restLogFileName = context.expand( '${#TestCase#restLogFileName}' )
def filext = ".log";
def fn = "$logDirectoryName$restLogFileName$filext"
def FileName = new PrintWriter( new FileWriter(fn));

// Add for optional timestamp logging
def sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS"); 
def myTime = "";

// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
//def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "error log" );  // to be commented when running through test runner

//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath 
def logFile = new File(projectPath + "\\ErrorLog.txt")

//def mex = com.eviware.soapui.model.iface.MessageExchange
def myTestCase = context.testCase

//def pathout = "C:\\Backup\\PTP_Project\\SOAP_Services\\TestOutput.xls";
def pathout = context.expand( '${#TestCase#OutputFileDirectory}' )

String datetime=new Date().toGMTString();
datetime=datetime.replace(" ", "");
datetime=datetime.replace(":", "");
String outputpath = pathout + "RESTOutput_" + datetime + ".xls"

FileOutputStream OutStream = new FileOutputStream(outputpath);
workbook = new HSSFWorkbook();

//code to read the input excel file for each of the request
ExcelReader excelReader = new ExcelReader();
List rows = excelReader.readData(context);

//Define the object for the collection of requests in the soapUI test case
def restRequests = testRunner.testCase.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep)
//Groovy Script to loop through each requests in the test case.
restRequests.each
{
	//Code to read the service name and validate it if the service step is matching with the current request step.
	def d = []
	int num = 1;
	int set = 0;
	int headerIndex = 0, contentIndex = 1;
	int dataIterationIndex = 1;
	Iterator i = rows.iterator();
	
	while(i.hasNext())
	{
		d = i.next();
		String ServiceName = d[0]; //Service Name
		String ExecutionFlag = d[1]; //ExecutionFlag
	
		log.info(ServiceName)
		log.info(ExecutionFlag)
	
		if((ServiceName != null) && (ExecutionFlag != null)) 
		{
			if(ServiceName.toUpperCase() == it.name.toUpperCase())
			{
				if(ExecutionFlag.toUpperCase() == "YES")
				{
					//code to retrieve the parameters from input excel file
					myTestCase.setPropertyValue("Property1", d[2])
					myTestCase.setPropertyValue("Property2", d[3])
					myTestCase.setPropertyValue("Property3", d[4])
					myTestCase.setPropertyValue("Property4", d[5])
					myTestCase.setPropertyValue("Property5", d[6])
					myTestCase.setPropertyValue("Property6", d[7])
					myTestCase.setPropertyValue("Property7", d[8])
					myTestCase.setPropertyValue("Property8", d[9])
					myTestCase.setPropertyValue("Property9", d[10])
					myTestCase.setPropertyValue("Property10", d[11])

					log.info("Property1 - " + context.expand( '${#TestCase#Property1}' ));
					log.info("Property2 - " + context.expand( '${#TestCase#Property2}' ));
					log.info("Property3 - " + context.expand( '${#TestCase#Property3}' ));
					log.info("Property4 - " + context.expand( '${#TestCase#Property4}' ));
					log.info("Property5 - " + context.expand( '${#TestCase#Property5}' ));
					log.info("Property6 - " + context.expand( '${#TestCase#Property6}' ));
					log.info("Property7 - " + context.expand( '${#TestCase#Property7}' ));
					log.info("Property8 - " + context.expand( '${#TestCase#Property8}' ));
					log.info("Property9 - " + context.expand( '${#TestCase#Property9}' ));
					log.info("Property10 - " + context.expand( '${#TestCase#Property10}' ));
	
					//code to create response output in the output workbook with request step name as sheet name
					if(set == 0) {
						worksheet = workbook.createSheet(it.name);
						set++;
					}
					row1 = worksheet.createRow((short)headerIndex);
					row2 = worksheet.createRow((short)contentIndex);

					//Code to mention the header index to know which data iteration it belongs
					HSSFCell cellA1 = row1.createCell((short) 0);
					cellA1.setCellValue(it.name + "_" + dataIterationIndex);
					CellStyle style = workbook.createCellStyle();
					style.setFillForegroundColor(HSSFColor.YELLOW.index);
					style.setFillPattern(CellStyle.SOLID_FOREGROUND);
					style.setBorderLeft((short) 1);            
					style.setBorderRight((short) 1);          
					style.setBorderTop((short) 1);              
					style.setBorderBottom((short) 1);
					//worksheet.autoSizeColumn(globalColIndexCounter);
					worksheet.setColumnWidth(0, 7500);
					cellA1.setCellStyle(style);
	
					myTime = sdf.format( new Date());
					FileName.println( "$myTime Start " + it.name ); //timestamp
					testRunner.runTestStepByName( it.name)
				
					//xml file for response to be stored in local project path
					testCaseResponseFileName = projectPath + "\\" +  it.name + "_Response.xml"
					def resFileName = new File(testCaseResponseFileName)
								
					//def holder = groovyUtils.getXmlHolder (it.name + “#Response”).toString()
					def request =testRunner.testCase.getTestStepByName( it.name ); // Get the WS
					def req = request.getProperty( "Request" ); // Get the request of the WS
					def resp = request.getProperty( "ResponseAsXML" ); // Get the response of the WS
					FileName.println( it.name + " - Request:" ); // Print WS Name & Request: 
					FileName.println( req.value ); // Print WS request
					FileName.println( it.name + " - Response:" ); // Print WS Name & Response:
					FileName.println( resp.value ); // Print WS respone
					resFileName.write( resp.value ); //Print response into xml file in the project path
					
					//log.info(mex.getResponseContentAsXml.toString())
					//testRunner.runTestStepByName( "PropertyTransfer")
					myTime = sdf.format( new Date());
					FileName.println( "$myTime End " + it.name ); //timestamp
				
					ReadXMLFile readXMLObj = new ReadXMLFile(log:log, workbook:workbook, worksheet:worksheet, row1:row1, row2:row2);
					readXMLObj.ReadXML(testCaseResponseFileName);
					resFileName.delete()

					headerIndex = headerIndex + 2;
					contentIndex = contentIndex + 2;
					dataIterationIndex = dataIterationIndex + 1;
				}
			}
		}
	}
}

workbook.write(OutStream);
OutStream.flush();
OutStream.close();

//This is the first line in the soapUI log file. ------ this code snippet should be commented when running through test runner as the getlog area is deactivated while running from test runner
//   if (logArea != null) // code to verify if the error get log area is not null before saving anything
//   {
//   	logFile.write("soapUI Logs In a file.\r\n")
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ))       
//      
//   }

FileName.flush();
FileName.close();]]></script></con:config></con:testStep><con:testStep type="request" name="CHWY_UNET" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelectMemberClaimSummaryDataServiceV5ServiceSoapBinding</con:interface><con:operation>invokeService</con:operation><con:request name="CHWY_UNET" outgoingWss="test" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://uhgservicegateway-tst.uhc.com/uhgservices/alpha/upm3/claimshighway/SelectMemberClaimSummaryDataV5</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v5="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5">
   <soapenv:Header/>
   <soapenv:Body>
      <v5:invokeService>
         <!--Optional:-->
         <arg0>
            <requestHeader>
               <applicationName>PTRCR</applicationName>
               <applicationInstanceName>PTRCR</applicationInstanceName>
               <logLevel>DEBUG</logLevel>
               <!--Optional:-->
               <externalId></externalId>
               <!--Zero or more repetitions:-->
               <serviceOption>
                  <key></key>
                  <value></value>
               </serviceOption>
               <!--Optional:-->
               <internalUse>
                  <uid></uid>
                  <serviceName></serviceName>
                  <serviceVersion></serviceVersion>
                  <originalConsumer></originalConsumer>
                  <originalServiceName></originalServiceName>
                  <originalServiceVersion></originalServiceVersion>
                  <logSequence></logSequence>
                  <uidGeneratedBy></uidGeneratedBy>
               </internalUse>
            </requestHeader>
            <!--Optional:-->
            <controlModifiers>
               <!--Optional:-->
               <claimsHighwaySystemParameter>
                  <!--Optional:-->
                  <applicationID>PTRCR</applicationID>
               </claimsHighwaySystemParameter>
            </controlModifiers>
            <!--Optional:-->
            <searchType>${#TestCase#Property1}</searchType>
            <!--Optional:-->
            <mpin>${#TestCase#Property2}</mpin>
            <!--Optional:-->
            <claimSourceID>${#TestCase#Property3}</claimSourceID>
            <!--Optional:-->
            <tin>${#TestCase#Property4}</tin>
            <!--Optional:-->
            <npiId></npiId>
            <!--Optional:-->
            <policyNumber></policyNumber>
            <!--Optional:-->
            <employeeId></employeeId>
            <!--Optional:-->
            <caeClaimNumber>${#TestCase#Property5}</caeClaimNumber>
            <!--Optional:-->
            <patientFirstName></patientFirstName>
            <!--Optional:-->
            <patientDateOfBirth></patientDateOfBirth>
            <!--Optional:-->
            <claimFirstDate></claimFirstDate>
            <!--Optional:-->
            <claimLastDate></claimLastDate>
            <!--Optional:-->
            <dateType></dateType>
            <!--Optional:-->
            <claimStatus></claimStatus>
            <!--Optional:-->
            <submittedChargeAmount></submittedChargeAmount>
            <!--Optional:-->
            <cosmosDivisionCode></cosmosDivisionCode>
            <!--Optional:-->
            <phsCompanyNumber></phsCompanyNumber>
            <!--Optional:-->
            <reconTrackingNumber></reconTrackingNumber>
            <!--Optional:-->
            <suffixCode></suffixCode>
            <!--Optional:-->
            <pagingState>
               <!--Optional:-->
               <moreData>false</moreData>
               <!--Optional:-->
               <nextClaimFirstDate></nextClaimFirstDate>
               <!--Optional:-->
               <nextClaimLastDate></nextClaimLastDate>
               <!--Optional:-->
               <nextICN></nextICN>
               <!--Optional:-->
               <nextICNType></nextICNType>
               <!--Optional:-->
               <nextSingleDate></nextSingleDate>
            </pagingState>
         </arg0>
      </v5:invokeService>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5/SelectMemberClaimSummaryData/invokeService"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CHWY_COSMOS" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelectMemberClaimSummaryDataServiceV5ServiceSoapBinding</con:interface><con:operation>invokeService</con:operation><con:request name="CHWY_COSMOS" outgoingWss="test" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://uhgservicegateway-tst.uhc.com/uhgservices/alpha/upm3/claimshighway/SelectMemberClaimSummaryDataV5</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v5="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5">
   <soapenv:Header/>
   <soapenv:Body>
      <v5:invokeService>
         <!--Optional:-->
         <arg0>
            <requestHeader>
               <applicationName>PTRCR</applicationName>
               <applicationInstanceName>PTRCR</applicationInstanceName>
               <logLevel>DEBUG</logLevel>
               <!--Optional:-->
               <externalId></externalId>
               <!--Zero or more repetitions:-->
               <serviceOption>
                  <key></key>
                  <value></value>
               </serviceOption>
               <!--Optional:-->
               <internalUse>
                  <uid></uid>
                  <serviceName></serviceName>
                  <serviceVersion></serviceVersion>
                  <originalConsumer></originalConsumer>
                  <originalServiceName></originalServiceName>
                  <originalServiceVersion></originalServiceVersion>
                  <logSequence></logSequence>
                  <uidGeneratedBy></uidGeneratedBy>
               </internalUse>
            </requestHeader>
            <!--Optional:-->
            <controlModifiers>
               <!--Optional:-->
               <claimsHighwaySystemParameter>
                  <!--Optional:-->
                  <applicationID>PTRCR</applicationID>
               </claimsHighwaySystemParameter>
            </controlModifiers>
            <!--Optional:-->
            <searchType>${#TestCase#Property1}</searchType>
            <!--Optional:-->
            <mpin>${#TestCase#Property2}</mpin>
            <!--Optional:-->
            <claimSourceID>${#TestCase#Property3}</claimSourceID>
            <!--Optional:-->
            <tin>${#TestCase#Property4}</tin>
            <!--Optional:-->
            <npiId></npiId>
            <!--Optional:-->
            <policyNumber></policyNumber>
            <!--Optional:-->
            <employeeId></employeeId>
            <!--Optional:-->
            <caeClaimNumber>${#TestCase#Property5}</caeClaimNumber>
            <!--Optional:-->
            <patientFirstName></patientFirstName>
            <!--Optional:-->
            <patientDateOfBirth></patientDateOfBirth>
            <!--Optional:-->
            <claimFirstDate></claimFirstDate>
            <!--Optional:-->
            <claimLastDate></claimLastDate>
            <!--Optional:-->
            <dateType></dateType>
            <!--Optional:-->
            <claimStatus></claimStatus>
            <!--Optional:-->
            <submittedChargeAmount></submittedChargeAmount>
            <!--Optional:-->
            <cosmosDivisionCode></cosmosDivisionCode>
            <!--Optional:-->
            <phsCompanyNumber></phsCompanyNumber>
            <!--Optional:-->
            <reconTrackingNumber></reconTrackingNumber>
            <!--Optional:-->
            <suffixCode></suffixCode>
            <!--Optional:-->
            <pagingState>
               <!--Optional:-->
               <moreData>false</moreData>
               <!--Optional:-->
               <nextClaimFirstDate></nextClaimFirstDate>
               <!--Optional:-->
               <nextClaimLastDate></nextClaimLastDate>
               <!--Optional:-->
               <nextICN></nextICN>
               <!--Optional:-->
               <nextICNType></nextICNType>
               <!--Optional:-->
               <nextSingleDate></nextSingleDate>
            </pagingState>
         </arg0>
      </v5:invokeService>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5/SelectMemberClaimSummaryData/invokeService"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="REST_Biometrics" disabled="true"><con:settings/><con:config service="OptumRallyAPI" resourcePath="/stage/phr/biometrics/v1.0" methodName="POSTMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST_Biometrics" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "${#TestCase#Property1}",
   "ownerIdSet": {"personId": "${#TestCase#Property2}"},
   "type": "0",
   "startDate": "${#TestCase#Property3}",
   "endDate": "${#TestCase#Property4}",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="REST_Conditions" disabled="true"><con:settings/><con:config service="OptumRallyAPI" resourcePath="/stage/phr/conditions/v1.0" methodName="POSTMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST_Conditions" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "${#TestCase#Property1}",
   "ownerIdSet": {"personId": "${#TestCase#Property2}"},
   "type": "0",
   "startDate": "${#TestCase#Property3}",
   "endDate": "${#TestCase#Property4}",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="REST_Medications" disabled="true"><con:settings/><con:config service="OptumRallyAPI" resourcePath="/stage/phr/medications/v1.0" methodName="POSTMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST_Medications" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "${#TestCase#Property1}",
   "ownerIdSet": {"personId": "${#TestCase#Property2}"},
   "type": "0",
   "startDate": "${#TestCase#Property3}",
   "endDate": "${#TestCase#Property4}",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="REST_SurgeryProcedures" disabled="true"><con:settings/><con:config service="OptumRallyAPI" resourcePath="/stage/phr/surgeryprocedures/v1.0" methodName="POSTMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST_SurgeryProcedures" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "${#TestCase#Property1}",
   "ownerIdSet": {"personId": "${#TestCase#Property2}"},
   "type": "0",
   "startDate": "${#TestCase#Property3}",
   "endDate": "${#TestCase#Property4}",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="REST_Providers" disabled="true"><con:settings/><con:config service="OptumRallyAPI" resourcePath="/stage/phr/providers/v1.0" methodName="POSTMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST_Providers" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "${#TestCase#Property1}",
   "ownerIdSet": {"personId": "${#TestCase#Property2}"},
   "type": "0",
   "startDate": "${#TestCase#Property3}",
   "endDate": "${#TestCase#Property4}",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="REST_Pregnancies" disabled="true"><con:settings/><con:config service="OptumRallyAPI" resourcePath="/stage/phr/pregnancies/v1.0" methodName="POSTMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST_Pregnancies" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "${#TestCase#Property1}",
   "ownerIdSet": {"personId": "${#TestCase#Property2}"},
   "type": "0",
   "startDate": "${#TestCase#Property3}",
   "endDate": "${#TestCase#Property4}",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="REST_Allergies" disabled="true"><con:settings/><con:config service="OptumRallyAPI" resourcePath="/stage/phr/allergies/v1.0" methodName="POSTMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST_Allergies" mediaType="application/json" postQueryString="false" sslKeystore="optumservicesApi2015new.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-stg.optum.com:8443</con:endpoint><con:request>{
   "consumerApplicationName": "${#TestCase#Property1}",
   "ownerIdSet": {"personId": "${#TestCase#Property2}"},
   "type": "0",
   "startDate": "${#TestCase#Property3}",
   "endDate": "${#TestCase#Property4}",
   "page": "1",
   "itemsPerPage": "10"
}</con:request><con:originalUri>https://api-stg.optum.com/stage/phr/allergies/v1.0</con:originalUri><con:assertion type="XPath Match" name="XPath Match"><con:configuration/></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>Property1</con:name><con:value>RALLY</con:value></con:property><con:property><con:name>Property2</con:name><con:value>20644244</con:value></con:property><con:property><con:name>Property3</con:name><con:value>2014-12-10T00:00:00Z</con:value></con:property><con:property><con:name>Property4</con:name><con:value>2015-04-13T23:59:59Z</con:value></con:property><con:property><con:name>Property5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Property6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Property7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Property8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Property9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Property10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>logDirectoryName</con:name><con:value>C:\Backup\PTP_Project\SOAP_Services\RESTORE\</con:value></con:property><con:property><con:name>testCaseLogFileName</con:name><con:value>FrameworkLogs</con:value></con:property><con:property><con:name>InputFilePath</con:name><con:value>C:\Backup\PTP_Project\SOAP_Services\RESTORE\Input.xls</con:value></con:property><con:property><con:name>OutputFileDirectory</con:name><con:value>C:\Backup\PTP_Project\SOAP_Services\RESTORE\</con:value></con:property><con:property><con:name>restLogFileName</con:name><con:value>RestFrameworkLogs</con:value></con:property><con:property><con:name>RestInputFilePath</con:name><con:value>C:\Backup\PTP_Project\SOAP_Services\RESTORE\RESTInput.xls</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer><con:crypto><con:source>C:/Backup/PTP_Project/SOAP_Services/RESTORE/odin-keystore.jks</con:source><con:password>1n5tallm3</con:password><con:type>KEYSTORE</con:type></con:crypto><con:crypto><con:source>C:/Backup/PTP_Project/SOAP_Services/RESTORE/optumservicesApi2015new.jks</con:source><con:password>optumapi</con:password><con:type>KEYSTORE</con:type></con:crypto><con:outgoing><con:name>test</con:name><con:entry type="Username" username="ptpcm" password="mBC/1234"><con:configuration><addCreated>true</addCreated><addNonce>true</addNonce><passwordType>PasswordText</passwordType></con:configuration></con:entry><con:entry type="Timestamp"><con:configuration><timeToLive>180</timeToLive><strictTimestamp>true</strictTimestamp></con:configuration></con:entry></con:outgoing></con:wssContainer><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>
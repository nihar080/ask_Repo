<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="WebServicesFramework_Baseline" resourceRoot="" soapui-version="4.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="ProjectSettings@shadowPassword"/></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="providerSearchByOON" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://dispatcher-tmptst1.ose.optum.com</con:endpoint></con:endpoints><con:resource name="providerSearchByOON" path="/tricareservices/providersearch/api/rest/providersearchv1/providerSearchByOON"><con:settings/><con:parameters/><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://dispatcher-tmptst1.ose.optum.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="portalMemContactPreference" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://dispatcher-tmpdev1.ose.optum.com</con:endpoint></con:endpoints><con:resource name="portalMemContactPreference" path="/tricareservices/userservices/api/rest/userservicepreferencesv1/portalMemContactPreference"><con:settings/><con:parameters/><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://dispatcher-tmpdev1.ose.optum.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="TestSuite1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ServiceTriggerFinal"><con:settings/><con:config><script><![CDATA[import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import java.io.*;
import java.util.HashMap;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

//imports for xml parsing
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;

Object.metaClass.globalRowIndexCounter = 1
Object.metaClass.globalXMLTagRepetitionIndex = 0
def HSSFWorkbook workbook
def HSSFSheet worksheet
def HSSFRow row1
def HSSFRow row3

class ReadXMLFile {
	def log
	def HSSFWorkbook workbook
	def HSSFSheet worksheet
	def HSSFRow row1
	def HSSFRow row3
	def duplicateFlag;
	HashMap <String, Integer> mapper = new HashMap<String, Integer>(); //hash map for storing xml tag repetition indexes
	//ArrayList arrXMLTags = new ArrayList(); //to track if a tag exists already in the output file
		
	def ReadXML(xmlPath) 
	{
		try {
			File fXmlFile = new File(xmlPath);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			//Code for Converting the xml response to UTF-8 compatible format
			InputStream inputStream= new FileInputStream(fXmlFile);
			Reader reader = new InputStreamReader(inputStream,"UTF-8");
			InputSource is = new InputSource(reader);
			is.setEncoding("UTF-8");
			Document doc = dBuilder.parse(is);
			//doc.getDocumentElement().normalize();
			log.info("Root element :" + doc.getDocumentElement().getNodeName())
			if (doc.hasChildNodes()) {
 				printNode(doc.getChildNodes());
 			}
 			//Globals.headerIndex = Globals.headerIndex + 2;
 			//Globals.contentIndex = Globals.contentIndex + 2;
		} catch (Exception e) {
			log.info(e.getMessage())
    		}
	}
	
	def printNode(NodeList nodeList) {
		//log.info(nodeList.getLength())
		for (int count = 0; count < nodeList.getLength(); count++) {
			Node tempNode = nodeList.item(count);
			if (tempNode.getNodeType() == Node.ELEMENT_NODE) {
				if((tempNode.getTextContent() != "") && (tempNode.getTextContent().contains("\n") != true)) {
					if (tempNode.hasAttributes() == false) {
						if ((tempNode.getNodeName().contains("soap:Body") == false) && (tempNode.getNodeName().contains("responseHeader") == false) && (tempNode.getNodeName().contains("internalUse") == false)) 
						{
							log.info("Node Length: - " + (tempNode.getNodeName()).length());
							if((tempNode.getNodeName()).length() <= 500) {
								log.info("\nNode Name =" + tempNode.getNodeName())

								//Code to create a hash map object and store the repetition key values
								duplicateFlag = false;
								if (mapper.containsKey(tempNode.getNodeName())) {
									log.info("Duplicate or existing node - " + tempNode.getNodeName())
									log.info("Mapper Index Node Level: - " + mapper.get(tempNode.getNodeName()));
									mapper.put(tempNode.getNodeName(), mapper.get(tempNode.getNodeName())+1);
									duplicateFlag = true;
								} else { 
								    	mapper.put(tempNode.getNodeName(),0);
								}
	
								log.info("mapper key content - " + mapper.get(tempNode.getNodeName()));
								log.info("Row Index Counter: - " + globalRowIndexCounter) //changed 5/12/2015
								row3 = worksheet.getRow(globalRowIndexCounter)
								log.info("Row Exists already at - " + globalRowIndexCounter + " returned - " + row3);
								if(row3 == null){
									row3 = worksheet.createRow((short) globalRowIndexCounter); //change made on 5/12/2015	
								}

								log.info("Header Index print node method for Request  - " + Globals.headerIndex)
								log.info("Content Index print node method for Request  - " + Globals.contentIndex)
								
								HSSFCell cellA2 = row3.createCell((short) Globals.headerIndex);
								if(duplicateFlag==true) {
									cellA2.setCellValue(tempNode.getNodeName() + "_" + mapper.get(tempNode.getNodeName()));
								} else {
									cellA2.setCellValue(tempNode.getNodeName());
								}
								
								CellStyle style = workbook.createCellStyle();
								style.setFillForegroundColor(HSSFColor.YELLOW.index);
	        						style.setFillPattern(CellStyle.SOLID_FOREGROUND);
								style.setBorderLeft((short) 1);            
								style.setBorderRight((short) 1);          
								style.setBorderTop((short) 1);              
								style.setBorderBottom((short) 1);
								//worksheet.autoSizeColumn(globalColIndexCounter);
								worksheet.setColumnWidth(Globals.headerIndex, 7500);
								cellA2.setCellStyle(style);
								
								log.info("Node Value =" + tempNode.getTextContent())
		
								//Iterator celliterator1 = row2.cellIterator();
								//while (celliterator1.hasNext()) {
								//	HSSFCell cells1 = celliterator.next();
								//	if(cells1.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
								//		current1 = HSSFCell.getColumnIndex();
								//		HSSFCell cellA2 = row2.createCell((short) current1);
								//		cellA2.setCellValue(tempNode.getNodeName());
								//	}
								//}		
		
								HSSFCell cellA3 = row3.createCell((short) Globals.contentIndex);
								cellA3.setCellValue(tempNode.getTextContent());
	
								CellStyle style1 = workbook.createCellStyle();
								if(tempNode.getTextContent().toUpperCase() == "SUCCESS") {
									style1.setFillForegroundColor(HSSFColor.GREEN.index);
	        							style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
								} else if(tempNode.getTextContent().toUpperCase() == "ERROR" || tempNode.getTextContent().toUpperCase() == "FAILURE") {
									style1.setFillForegroundColor(HSSFColor.RED.index);
	        							style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
								}
								style1.setBorderLeft((short) 1);            
								style1.setBorderRight((short) 1);          
								style1.setBorderTop((short) 1);              
								style1.setBorderBottom((short) 1);
								worksheet.setColumnWidth(Globals.contentIndex, 7500); //changed on 5/12/2015
								cellA3.setCellStyle(style1);
		
								globalRowIndexCounter++;	//changed on 5/12/2015
								
							}	
						}
					}
				}
				if (tempNode.hasChildNodes()) {
					// loop again if has child nodes
					printNode(tempNode.getChildNodes());
				}	
			}
		}
	}
}

class ExcelReader {
	def log
	def projectPath
	def readData(context) 
 	{
		//def path = "C:\\Backup\\PTP_Project\\SOAP_Services\\Input.xls";
		def path = context.expand( '${#TestCase#InputFile}' )
		InputStream inputStream = new FileInputStream(projectPath + "\\" + path);
		Workbook workbook = WorkbookFactory.create(inputStream);
		Sheet sheet = workbook.getSheetAt(0);
              
		Iterator rowIterator = sheet.rowIterator();
		rowIterator.next()
		Row row;                       
		def rowsData = []
		while(rowIterator.hasNext())
		{
			row = rowIterator.next()
			def rowIndex = row.getRowNum()
			def colIndex;
			def rowData = []
			for (Cell cell : row) 
			{
				colIndex = cell.getColumnIndex()
				
				def value;
				//cell.setCellType(Cell.CELL_TYPE_STRING);
				switch (cell.cellType)
				{
					case HSSFCell.CELL_TYPE_NUMERIC:
						if(HSSFDateUtil.isCellDateFormatted(cell))
						{
							value = new DataFormatter().formatCellValue(cell);		
							//value = cell.dateCellValue;
						}
						else
						{
							value = new DataFormatter().formatCellValue(cell);
						}
		                    break;
					case HSSFCell.CELL_TYPE_BOOLEAN:
						value = cell.booleanCellValue
						break;
 					default:
						value = new DataFormatter().formatCellValue(cell);
						break;
				}
				//log.info("Excel reader value = " + value)
				 rowData[colIndex] = value
			}                    
			rowsData << rowData
         }
		rowsData
	}
}

//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath 

//** LOG FILE DEFINITION - Place somewhere at the top of the script **//
def logDirectoryName = projectPath
def testCaseLogFileName = "\\FrameworkLogs"
def filext = ".log";
def fn = "$logDirectoryName$testCaseLogFileName$filext"
def FileName = new PrintWriter( new FileWriter(fn));

// Add for optional timestamp logging
def sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS"); 
def myTime = "";

// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
//def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "error log" );  // to be commented when running through test runner

def logFile = new File(projectPath + "\\ErrorLog.txt")

//Code to check and write the execution tracker file
try{
    String sExecutionStatus = "Started";
    def sExeTrackerFile = new File(projectPath + "\\ExecutionTracker.txt");

    // if file doesnt exists, then create it
    if (!sExeTrackerFile.exists()) {
        sExeTrackerFile.createNewFile();
    }else{
		sExeTrackerFile.delete()
    }

    FileWriter fw = new FileWriter(sExeTrackerFile.getAbsoluteFile());
    BufferedWriter bw = new BufferedWriter(fw);
    bw.write(sExecutionStatus);
    bw.close();
}catch(IOException e){
    e.printStackTrace();
}

//def mex = com.eviware.soapui.model.iface.MessageExchange
def myTestCase = context.testCase

//def pathout = "C:\\Backup\\PTP_Project\\SOAP_Services\\TestOutput.xls";
def pathout = projectPath

class Globals {
	static int headerIndex = 0
	static int contentIndex = 1
	static int dataIterationIndex = 1
}

String datetime=new Date().toGMTString();
datetime=datetime.replace(" ", "");
datetime=datetime.replace(":", "");
//String outputpath = pathout + "Output_" + datetime + ".xls"  //commented to get rid of time stamp
String outputpath = pathout + "\\Output.xls"

FileOutputStream OutStream = new FileOutputStream(outputpath);
workbook = new HSSFWorkbook();

//code to read the input excel file for each of the request
ExcelReader excelReader = new ExcelReader(projectPath:projectPath, log:log);
List rows = excelReader.readData(context);

//Code to read the service name and validate it if the service step is matching with the current request step.
Iterator i = rows.iterator();

//Define the object for the collection of requests in the soapUI test case
def soapuiRequests = testRunner.testCase.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class )
log.info("SOAP UI Requests count - " + soapuiRequests.size())

def restRequests = testRunner.testCase.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep)
log.info("REST Requests count - " + restRequests.size())

//Define mapper class for tracking the sheet level indexes
HashMap <String, Integer> mapperSheet = new HashMap<String, Integer>(); //hash map for storing xml tag repetition indexes

while(i.hasNext())
{
	def d = []
	int num = 1;
	int set = 0;
	Globals.headerIndex = 0;
	Globals.contentIndex = 1;
	Globals.dataIterationIndex = 1;
	
	d = i.next();
	colArraySize = d.size;
	String ServiceName = d[0]; //Service Name
	String ExecutionFlag = d[1]; //ExecutionFlag

	log.info(ServiceName)
	log.info(ExecutionFlag)

	if((ServiceName != null) && (ExecutionFlag != null)) 
	{
		if(ExecutionFlag.toUpperCase() == "YES")
		{
			if(soapuiRequests.size() != 0)
			{
				//Groovy Script to loop through each requests in the test case.
				soapuiRequests.each
				{
					if(ServiceName.toUpperCase() == it.name.toUpperCase())
					{
						//Code to remove all the properties prior to execution
						String[] propToRemove = new String[myTestCase.getPropertyCount()];
						propToRemove = myTestCase.getPropertyNames();
						for ( int propIterator = 0 ; propIterator < propToRemove.size();propIterator++ ){
							if(propToRemove[propIterator].toUpperCase() != "INPUTFILE" && propToRemove[propIterator].toUpperCase() != "OUTPUTPROPERTY") 
							{
								myTestCase.removeProperty( propToRemove[propIterator] );	
							}
						}
						
						//code to retrieve the parameters from input excel file and create the properties at runtime
						int InputPropertyIndex = 1;
						for(colArrayIndex = 3; colArrayIndex <= colArraySize; colArrayIndex++)
						{
							def sArrayPointerValue = d[colArrayIndex-1]
							if(sArrayPointerValue != null && !sArrayPointerValue.isEmpty())
							{
								if(!myTestCase	.hasProperty("Property" + InputPropertyIndex)) {
		          					 myTestCase.addProperty("Property" +  InputPropertyIndex)
								}
								myTestCase.setPropertyValue("Property" +  InputPropertyIndex, sArrayPointerValue)
								log.info("Property" +InputPropertyIndex+ " - " + context.expand( '${#TestCase#Property'+InputPropertyIndex+'}' ));
								InputPropertyIndex++;
							}
						}
		
						//Code to create a hash map object and store the repetition key values
						if (mapperSheet.containsKey(it.name + "_HeaderIndex")) {
							mapperSheet.put(it.name + "_HeaderIndex", mapperSheet.get(it.name + "_HeaderIndex")+2);
							mapperSheet.put(it.name + "_ContentIndex", mapperSheet.get(it.name + "_ContentIndex")+2);
							mapperSheet.put(it.name + "_DataIterationIndex", mapperSheet.get(it.name + "_DataIterationIndex")+1);
						} else { 
						    	mapperSheet.put(it.name + "_HeaderIndex",0);
						    	mapperSheet.put(it.name + "_ContentIndex",1);
						    	mapperSheet.put(it.name + "_DataIterationIndex",1);
						}
						Globals.headerIndex = mapperSheet.get(it.name + "_HeaderIndex");
						Globals.contentIndex = mapperSheet.get(it.name + "_ContentIndex");
						Globals.dataIterationIndex = mapperSheet.get(it.name + "_DataIterationIndex");

						log.info("Header Index While loop for Request " + it.name  + " - " + Globals.headerIndex)
						log.info("Content Index While loop for Request " + it.name  + " - " + Globals.contentIndex)
						log.info("DataIteration Index While loop for Request " + it.name  + " - " + Globals.dataIterationIndex)
						
						//code to create response output in the output workbook with request step name as sheet name
						if(workbook.getSheetIndex(it.name) == -1)
						{
							worksheet = workbook.createSheet(it.name);
							row1 = worksheet.createRow((short)0); // change made on 5/12/2015
						}else{
							log.info("Worksheet Exists at Index - " + workbook.getSheetIndex(it.name))
							worksheet = workbook.getSheetAt(workbook.getSheetIndex(it.name))
							row1 = worksheet.getRow(0);
						}
		
						//Code to mention the header index to know which data iteration it belongs
						HSSFCell cellA1 = row1.createCell((short) Globals.headerIndex);
						cellA1.setCellValue(it.name + "_" + Globals.dataIterationIndex);
						CellStyle style = workbook.createCellStyle();
						style.setFillForegroundColor(HSSFColor.YELLOW.index);
						style.setFillPattern(CellStyle.SOLID_FOREGROUND);
						style.setBorderLeft((short) 1);            
						style.setBorderRight((short) 1);          
						style.setBorderTop((short) 1);              
						style.setBorderBottom((short) 1);
						//worksheet.autoSizeColumn(globalColIndexCounter);
						worksheet.setColumnWidth(Globals.headerIndex, 7500);
						cellA1.setCellStyle(style);
		
						myTime = sdf.format( new Date());
						FileName.println( "$myTime Start " + it.name ); //timestamp
						testRunner.runTestStepByName( it.name)
					
						//xml file for response to be stored in local project path
						testCaseResponseFileName = projectPath + "\\" +  it.name + "_Response.xml"
						def resFileName = new File(testCaseResponseFileName)
									
						//def holder = groovyUtils.getXmlHolder (it.name + “#Response”).toString()
						def request =testRunner.testCase.getTestStepByName( it.name ); // Get the WS
						def req = request.getProperty( "Request" ); // Get the request of the WS
						def resp = request.getProperty( "Response" ); // Get the response of the WS
						FileName.println( it.name + " - Request:" ); // Print WS Name & Request: 
						FileName.println( req.value ); // Print WS request
						FileName.println( it.name + " - Response:" ); // Print WS Name & Response:
						FileName.println( resp.value ); // Print WS respone
						resFileName.write( resp.value ); //Print response into xml file in the project path
						
						//log.info(mex.getResponseContentAsXml.toString())
						testRunner.runTestStepByName( "PropertyTransfer")
						myTime = sdf.format( new Date());
						FileName.println( "$myTime End " + it.name ); //timestamp
					
						ReadXMLFile readXMLObj = new ReadXMLFile(log:log, workbook:workbook, worksheet:worksheet, row1:row1);
						readXMLObj.ReadXML(testCaseResponseFileName);
						resFileName.delete()
		
						//headerIndex = headerIndex + 2; // change made on 5/12/2015
						//contentIndex = contentIndex + 2; // change made on 5/12/2015
						//dataIterationIndex = dataIterationIndex + 1;
					}	
				}
			}

			if( restRequests.size() != 0)
			{
				//Groovy Script to loop through each requests in the test case.
				restRequests.each
				{
					if(ServiceName.toUpperCase() == it.name.toUpperCase())
					{
						//Code to remove all the properties prior to execution
						String[] propToRemove = new String[myTestCase.getPropertyCount()];
						propToRemove = myTestCase.getPropertyNames();
						for ( int propIterator = 0 ; propIterator < propToRemove.size();propIterator++ ){
							if(propToRemove[propIterator].toUpperCase() != "INPUTFILE" && propToRemove[propIterator].toUpperCase() != "OUTPUTPROPERTY") 
							{
								myTestCase.removeProperty( propToRemove[propIterator] );	
							}
						}
						
						//code to retrieve the parameters from input excel file and create the properties at runtime
						int InputPropertyIndex = 1;
						for(colArrayIndex = 3; colArrayIndex <= colArraySize; colArrayIndex++)
						{
							def sArrayPointerValue = d[colArrayIndex-1]
							if(sArrayPointerValue != null && !sArrayPointerValue.isEmpty())
							{
								if(!myTestCase	.hasProperty("Property" + InputPropertyIndex)) {
		          					 myTestCase.addProperty("Property" +  InputPropertyIndex)
								}
								myTestCase.setPropertyValue("Property" +  InputPropertyIndex, sArrayPointerValue)
								log.info("Property" +InputPropertyIndex+ " - " + context.expand( '${#TestCase#Property'+InputPropertyIndex+'}' ));
								InputPropertyIndex++;
							}
						}
		
						//Code to create a hash map object and store the repetition key values
						if (mapperSheet.containsKey(it.name + "_HeaderIndex")) {
							mapperSheet.put(it.name + "_HeaderIndex", mapperSheet.get(it.name + "_HeaderIndex")+2);
							mapperSheet.put(it.name + "_ContentIndex", mapperSheet.get(it.name + "_ContentIndex")+2);
							mapperSheet.put(it.name + "_DataIterationIndex", mapperSheet.get(it.name + "_DataIterationIndex")+1);
						} else { 
						    	mapperSheet.put(it.name + "_HeaderIndex",0);
						    	mapperSheet.put(it.name + "_ContentIndex",1);
						    	mapperSheet.put(it.name + "_DataIterationIndex",1);
						}
						Globals.headerIndex = mapperSheet.get(it.name + "_HeaderIndex");
						Globals.contentIndex = mapperSheet.get(it.name + "_ContentIndex");
						Globals.dataIterationIndex = mapperSheet.get(it.name + "_DataIterationIndex");

						log.info("Header Index While loop for Request " + it.name  + " - " + Globals.headerIndex)
						log.info("Content Index While loop for Request " + it.name  + " - " + Globals.contentIndex)
						log.info("DataIteration Index While loop for Request " + it.name  + " - " + Globals.dataIterationIndex)
						
						//code to create response output in the output workbook with request step name as sheet name
						if(workbook.getSheetIndex(it.name) == -1)
						{
							worksheet = workbook.createSheet(it.name);
							row1 = worksheet.createRow((short)0); // change made on 5/12/2015
						}else{
							log.info("Worksheet Exists at Index - " + workbook.getSheetIndex(it.name))
							worksheet = workbook.getSheetAt(workbook.getSheetIndex(it.name))
							row1 = worksheet.getRow(0);
						}
		
						//Code to mention the header index to know which data iteration it belongs
						HSSFCell cellA1 = row1.createCell((short) Globals.headerIndex);
						cellA1.setCellValue(it.name + "_" + Globals.dataIterationIndex);
						CellStyle style = workbook.createCellStyle();
						style.setFillForegroundColor(HSSFColor.YELLOW.index);
						style.setFillPattern(CellStyle.SOLID_FOREGROUND);
						style.setBorderLeft((short) 1);            
						style.setBorderRight((short) 1);          
						style.setBorderTop((short) 1);              
						style.setBorderBottom((short) 1);
						//worksheet.autoSizeColumn(globalColIndexCounter);
						worksheet.setColumnWidth(Globals.headerIndex, 7500);
						cellA1.setCellStyle(style);
		
						myTime = sdf.format( new Date());
						FileName.println( "$myTime Start " + it.name ); //timestamp
						testRunner.runTestStepByName( it.name)
					
						//xml file for response to be stored in local project path
						testCaseResponseFileName = projectPath + "\\" +  it.name + "_Response.xml"
						def resFileName = new File(testCaseResponseFileName)
									
						//def holder = groovyUtils.getXmlHolder (it.name + “#Response”).toString()
						def request =testRunner.testCase.getTestStepByName( it.name ); // Get the WS
						def req = request.getProperty( "Request" ); // Get the request of the WS
						def resp = request.getProperty( "ResponseAsXML" ); // Get the response of the WS
						FileName.println( it.name + " - Request:" ); // Print WS Name & Request: 
						FileName.println( req.value ); // Print WS request
						FileName.println( it.name + " - Response:" ); // Print WS Name & Response:
						FileName.println( resp.value ); // Print WS respone
						resFileName.write( resp.value ); //Print response into xml file in the project path
						
						//log.info(mex.getResponseContentAsXml.toString())
						testRunner.runTestStepByName( "PropertyTransfer")
						myTime = sdf.format( new Date());
						FileName.println( "$myTime End " + it.name ); //timestamp
					
						ReadXMLFile readXMLObj = new ReadXMLFile(log:log, workbook:workbook, worksheet:worksheet, row1:row1);
						readXMLObj.ReadXML(testCaseResponseFileName);
						resFileName.delete()
		
						//headerIndex = headerIndex + 2; // change made on 5/12/2015
						//contentIndex = contentIndex + 2; // change made on 5/12/2015
						//dataIterationIndex = dataIterationIndex + 1;
					}	
				}
			}
		}
	}
}

workbook.write(OutStream);
OutStream.flush();
OutStream.close();

//This is the first line in the soapUI log file. ------ this code snippet should be commented when running through test runner as the getlog area is deactivated while running from test runner
//   if (logArea != null) // code to verify if the error get log area is not null before saving anything
//   {
//   	logFile.write("soapUI Logs In a file.\r\n")
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ))       
//      
//   }

//Code to check and write the execution tracker file
try{
    String sExecutionStatus = "Completed";
    def sExeTrackerFile = new File(projectPath + "\\ExecutionTracker.txt");

    // if file doesnt exists, then create it
    if (!sExeTrackerFile.exists()) {
        sExeTrackerFile.createNewFile();
    }else{
		sExeTrackerFile.delete()
    }

    FileWriter fw = new FileWriter(sExeTrackerFile.getAbsoluteFile());
    BufferedWriter bw = new BufferedWriter(fw);
    bw.write(sExecutionStatus);
    bw.close();
}catch(IOException e){
    e.printStackTrace();
}

FileName.flush();
FileName.close();]]></script></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>TIN</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://upm3.uhc.com';
declare namespace ns2='http://upm3.uhc.com/claimshighway/selectmemberclaimsummarydata/v5';

ns1</con:sourcePath><con:targetStep>providerSearchByOON</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="JSONBuildTest"><con:settings/><con:config><script>import groovy.json.JsonOutput
import java.lang.*
import java.util.*

def jsonBuilder = new groovy.json.JsonBuilder()
HashMap &lt;String, Object> mapper = new HashMap&lt;String, Object>();

class MyActivityInfo{
	def sourceTransactionId
	def activityId
	def activityDate
	def publishDate
	def transactionType
	def firstName
	def lastName
	def dateOfBirth
	def searchID
	def contractNumber

	public void setData (srcTransactionId, actyId, actyDate, pubDate, transType, fstName, lstName, dtOfBirth, srchID, ctrctNum) {
   		this.sourceTransactionId = srcTransactionId
   		this.activityId = actyId
   		this.activityDate = actyDate
   		this.publishDate = pubDate
   		this.transactionType = transType
   		this.firstName = fstName
   		this.lastName = lstName
   		this.dateOfBirth = dtOfBirth
   		this.searchID = srchID
   		this.contractNumber = ctrctNum
	} 
	
	@Override
	public String toString() {
		def content = "{ \"sourceTransactionId\" : \"" + this.sourceTransactionId + "\", \"activityId\" : \"" + this.activityId + "\", \"activityDate\" : \"" + this.activityDate + "\", \"publishDate\" : \"" + this.publishDate + "\", \"transactionType\" : \"" + this.transactionType + "\", \"memberEligibilityIdentifier\" : { \"firstName\" : \"" + this.firstName + "\", \"lastName\" : \"" + this.lastName + "\", \"dateOfBirth\" : \"" + this.dateOfBirth + "\", \"searchID\" : \"" + this.searchID + "\", \"contractNumber\" : \"" + this.contractNumber + "\" }}";
		return content;
    }
}

def sRecordCount = 3
List&lt;Object> myActivityList = new ArrayList&lt;>();
for(iRecPtr = 1; iRecPtr&lt;=sRecordCount; iRecPtr++)
{
	def myActivityInfo1 = new MyActivityInfo();
	myActivityInfo1.setData('201501290113', 'RALLY.HEALTH_SURVEY.LONG', '2015-01-29T00:00:00Z', '2015-01-29T00:00:00Z', 'NEW', 'COKLEY', 'ROBBIE', '1970-02-04T00:00:00Z', '316228379', '0777783');
	mapper.put("Object_" + iRecPtr , myActivityInfo1);

	myActivityList.add(mapper.get("Object_" + iRecPtr))
}

log.info(myActivityList.size())

jsonBuilder(activityInformation: myActivityList)
//log.info(jsonBuilder.toPrettyString())
String content
content = jsonBuilder.getContent();
content = content.replaceAll("activityInformation=", "\"activityInformation\":");
log.info(content);</script></con:config></con:testStep><con:testStep type="restrequest" name="providerSearchByOON"><con:settings/><con:config service="providerSearchByOON" resourcePath="/tricareservices/providersearch/api/rest/providersearchv1/providerSearchByOON" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="providerSearchByOON" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://dispatcher-tmptst1.ose.optum.com</con:endpoint><con:request>{"latitude":"${#TestCase#Property1}", "longitude":"${#TestCase#Property2}", "radius":"${#TestCase#Property3}"}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="portalMemContactPreference"><con:settings/><con:config service="portalMemContactPreference" resourcePath="/tricareservices/userservices/api/rest/userservicepreferencesv1/portalMemContactPreference" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="portalMemContactPreference" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://dispatcher-tmpdev1.ose.optum.com</con:endpoint><con:request>{
"requestCode": "${#TestCase#Property1}",
"actorID": "${#TestCase#Property2}",
"dbnid": "${#TestCase#Property3}"}
</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>InputFile</con:name><con:value>Input.xls</con:value></con:property><con:property><con:name>Property1</con:name><con:value>RALLY</con:value></con:property><con:property><con:name>Property2</con:name><con:value>20644244</con:value></con:property><con:property><con:name>Property3</con:name><con:value>2014-12-10T00:00:00Z</con:value></con:property><con:property><con:name>Property4</con:name><con:value>2015-04-13T23:59:59Z</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties/><con:encryptedContent xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:wssContainer><con:crypto><con:source>C:/Sandeep_CDrive/Backup/PTP_Project/SOAP_Services/WebServiceFramework/odin-keystore.jks</con:source><con:password>1n5tallm3</con:password><con:type>KEYSTORE</con:type></con:crypto><con:crypto><con:source>C:/Sandeep_CDrive/Backup/PTP_Project/SOAP_Services/WebServiceFramework/optumservicesApi2015new.jks</con:source><con:password>optumapi</con:password><con:type>KEYSTORE</con:type></con:crypto><con:crypto><con:source>C:/Sandeep_CDrive/Backup/PTP_Project/SOAP_Services/WebServiceFramework/findConsumerKeyStore.jks</con:source><con:password>wesbfc</con:password><con:type>KEYSTORE</con:type></con:crypto><con:outgoing><con:name>test</con:name><con:entry type="Username" username="ptpcm" password="mBC/1234"><con:configuration><addCreated>true</addCreated><addNonce>true</addNonce><passwordType>PasswordText</passwordType></con:configuration></con:entry><con:entry type="Timestamp"><con:configuration><timeToLive>180</timeToLive><strictTimestamp>true</strictTimestamp></con:configuration></con:entry></con:outgoing><con:outgoing><con:name>findConsumer</con:name><con:entry type="Timestamp"><con:configuration><timeToLive>60</timeToLive><strictTimestamp>true</strictTimestamp></con:configuration></con:entry><con:entry type="Signature" username="findconsumer"><con:configuration><crypto>findConsumerKeyStore.jks</crypto><keyIdentifierType>0</keyIdentifierType><signatureAlgorithm/><signatureCanonicalization/><useSingleCert>false</useSingleCert><digestAlgorithm/></con:configuration></con:entry><con:entry type="Username"><con:configuration/></con:entry></con:outgoing></con:wssContainer><con:sensitiveInformation/></con:soapui-project>